<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Collaborative Attendance Sheet</title>
    <!-- Chosen Palette: Warm Neutrals -->
    <!-- Application Structure Plan: The application maintains a single-view utility structure, now enhanced with real-time collaboration. It starts with context-setting inputs (In Charge, Week) and displays the current User ID for multi-user identification. The core interactive element is a grid where each day for each student has an 'In Time' input and a 'Present' checkbox, allowing direct data entry. All inputs are live-synced via Firestore. Below this, a dynamic dashboard section with summary cards for daily attendance (Present/Absent) and a Chart.js chart for weekly student presence provides real-time data synthesis. A "Reset Sheet" button is included for administrative clearing. This structure prioritizes direct data capture and immediate, synchronized feedback, enabling multiple users to efficiently record attendance and visualize overall trends collaboratively. -->
    <!-- Visualization & Content Choices: Report Info (In Charge, Week, User ID) -> Goal: Inform -> HTML Inputs for user entry and display of system-generated ID. Attendance Grid -> Goal: Organize/Input/Collaborate -> HTML/CSS grid with input type="time" for 'In Time' and input type="checkbox" for 'Present'. These inputs are directly bound to Firestore updates, ensuring real-time synchronization. Attendance Overview -> Goal: Compare/Synthesize -> Summary cards (HTML/JS) for daily Present/Absent counts and a horizontal bar chart (Chart.js) for weekly student presence. Both dynamically update from Firestore data, offering a clear visual summary of overall attendance patterns across all users. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, setDoc, onSnapshot, collection } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables provided by Canvas environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        let app;
        let db;
        let auth;
        let userId = 'loading...'; // Placeholder until auth is ready

        // Initialize Firebase and authenticate
        try {
            app = initializeApp(firebaseConfig);
            db = getFirestore(app);
            auth = getAuth(app);

            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    userId = user.uid;
                } else {
                    // Sign in anonymously if no initial token or if auth state changes to signed out
                    try {
                        if (initialAuthToken) {
                            await signInWithCustomToken(auth, initialAuthToken);
                            userId = auth.currentUser.uid;
                        } else {
                            await signInAnonymously(auth);
                            userId = auth.currentUser.uid;
                        }
                    } catch (error) {
                        console.error("Firebase Auth Error:", error);
                        // Fallback to a random ID if authentication fails
                        userId = crypto.randomUUID();
                    }
                }
                document.getElementById('user-id-display').textContent = userId;
                // Once auth is ready, proceed with app initialization
                initializeAttendanceApp();
            });
        } catch (error) {
            console.error("Firebase Initialization Error:", error);
            // Fallback if Firebase initialization itself fails (e.g., bad config)
            userId = crypto.randomUUID();
            document.getElementById('user-id-display').textContent = userId;
            initializeAttendanceApp(); // Still try to run the app, but without persistence
        }

        // Make Firebase instances and userId globally accessible to the main script
        window.firebaseApp = app;
        window.firestoreDb = db;
        window.firebaseAuth = auth;
        window.currentUserId = userId; // This will be updated by onAuthStateChanged

        // Main app logic will be called after Firebase is initialized
        function initializeAttendanceApp() {
            // This function will contain the main DOMContentLoaded logic
            // to ensure Firebase is ready before interacting with Firestore.
            // We'll move the existing DOMContentLoaded code into this function.
            console.log("Firebase initialized. User ID:", window.currentUserId);
            // Call the main app logic here
            window.runAttendanceApp();
        }
    </script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f1f5f9; /* slate-100 */
        }
        input[type="time"] {
            width: 80px; /* Adjust width as needed */
            padding: 4px;
            font-size: 0.75rem; /* text-xs */
            border-radius: 0.25rem; /* rounded-md */
            border: 1px solid #d1d5db; /* border-gray-300 */
            text-align: center;
        }
        input[type="checkbox"] {
            transform: scale(1.2); /* Slightly larger checkboxes */
            margin: 0 auto; /* Center checkboxes in their cells */
            display: block; /* Ensure block display for centering */
        }
        .day-header {
            cursor: pointer;
            transition: background-color 0.2s ease-in-out;
        }
        .chart-container {
            position: relative;
            height: 320px;
            max-height: 80vh;
            width: 100%;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }
        @media (min-width: 768px) {
            .chart-container {
                height: 400px;
            }
        }
        .grid-cell {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 4px; /* Space between time input and checkbox */
            padding: 4px;
        }
        @media (max-width: 640px) {
            .grid-cols-custom {
                grid-template-columns: 1fr repeat(5, minmax(0, 1fr)); /* Student name + 5 days */
            }
            .grid-cell {
                padding: 2px;
            }
            input[type="time"] {
                width: 65px; /* Smaller width for mobile */
                font-size: 0.65rem;
            }
        }
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            font-size: 1.5rem;
            color: #333;
        }
    </style>
</head>
<body class="antialiased text-slate-700">
    <div class="loading-overlay" id="loadingOverlay">Loading...</div>

    <div class="container mx-auto p-4 md:p-8 max-w-7xl hidden" id="appContent">

        <!-- Header -->
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold text-slate-800">Collaborative Attendance Sheet</h1>
            <p class="text-slate-500 mt-2">Track student attendance with in-times and presence across multiple users.</p>
            <p class="text-xs text-slate-400 mt-1">Your User ID: <span id="user-id-display">Loading...</span></p>
        </header>

        <!-- Main Content -->
        <main class="bg-white rounded-xl shadow-lg p-6 md:p-8">

            <!-- Section 1: Report Info -->
            <section id="report-info" class="mb-8 pb-8 border-b border-slate-200">
                <h2 class="text-2xl font-semibold mb-4 text-slate-800">Report Details</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="inChargeName" class="block text-sm font-medium text-slate-600 mb-1">Metro In Charge Name</label>
                        <input type="text" id="inChargeName" class="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Enter name...">
                    </div>
                    <div>
                        <label for="weekNumber" class="block text-sm font-medium text-slate-600 mb-1">Week Number</label>
                        <input type="number" id="weekNumber" class="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Enter week number..." min="1">
                    </div>
                </div>
            </section>

            <!-- Section 2: Attendance Grid -->
            <section id="attendance-grid" class="mb-8">
                <h2 class="text-2xl font-semibold text-slate-800 mb-4">Attendance Grid</h2>
                <p class="text-slate-500 mb-6 max-w-3xl">Fill in the arrival time for each student and mark them as 'Present' for the day. All changes are saved automatically and seen by others.</p>
                <div class="overflow-x-auto">
                    <div class="grid grid-cols-custom sm:grid-cols-6 gap-2 text-center min-w-[700px]">
                        <div class="font-semibold text-left p-3">Student</div>
                        <div id="day-Mon" class="day-header font-semibold p-3 bg-slate-100 rounded-lg">Monday</div>
                        <div id="day-Tue" class="day-header font-semibold p-3 bg-slate-100 rounded-lg">Tuesday</div>
                        <div id="day-Wed" class="day-header font-semibold p-3 bg-slate-100 rounded-lg">Wednesday</div>
                        <div id="day-Thu" class="day-header font-semibold p-3 bg-slate-100 rounded-lg">Thursday</div>
                        <div id="day-Fri" class="day-header font-semibold p-3 bg-slate-100 rounded-lg">Friday</div>

                        <!-- Student Rows will be injected by JS -->
                    </div>
                </div>
            </section>

            <!-- Section 3: Attendance Overview -->
            <section id="overview" class="mb-8 pb-8 border-b border-slate-200">
                <h2 class="text-2xl font-semibold mb-4 text-slate-800">Attendance Overview</h2>
                <p class="text-slate-500 mb-6 max-w-3xl">This section provides a real-time summary of the attendance data. Click on a day's name in the grid above (e.g., 'Monday') to see the stats for that day. The chart shows the total weekly attendance for each student, updating with every change you make.</p>
                
                <!-- Daily Stats -->
                <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mb-8">
                    <div class="bg-slate-50 p-5 rounded-lg text-center">
                        <p class="text-sm font-medium text-slate-500">Selected Day</p>
                        <p id="selected-day" class="text-2xl font-bold text-blue-600">-</p>
                    </div>
                    <div class="bg-slate-50 p-5 rounded-lg text-center">
                        <p class="text-sm font-medium text-slate-500">Present</p>
                        <p id="stat-present" class="text-2xl font-bold text-green-600">0</p>
                    </div>
                    <div class="bg-slate-50 p-5 rounded-lg text-center">
                        <p class="text-sm font-medium text-slate-500">Absent</p>
                        <p id="stat-absent" class="text-2xl font-bold text-red-600">0</p>
                    </div>
                </div>

                <!-- Weekly Chart -->
                <div class="chart-container">
                    <canvas id="attendanceChart"></canvas>
                </div>
            </section>

            <!-- Section 4: Actions -->
            <section id="actions" class="text-center">
                <button id="resetBtn" class="bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-8 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105">
                    Reset Entire Sheet (Admin)
                </button>
            </section>
        </main>
    </div>

    <script type="module">
        // Import Firestore functions
        import { doc, setDoc, onSnapshot } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { getAuth } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";

        // Access global Firebase instances from the first script tag
        const db = window.firestoreDb;
        const auth = window.firebaseAuth;
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

        const students = [
            { id: 'inam', name: 'Inam Tahir' },
            { id: 'umair', name: 'Umair Rashid' },
            { id: 'momin', name: 'Abdul Momin' },
            { id: 'aqib', name: 'Aqib Hussain' }
        ];
        const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'];
        const ATTENDANCE_DOC_PATH = `artifacts/${appId}/public/data/attendance`; // Public collection path
        const ATTENDANCE_DOC_ID = 'attendanceSheet'; // Single document for the sheet

        let attendanceData = {};
        let chartInstance = null;
        let currentSelectedDay = null;
        
        const gridContainer = document.querySelector('#attendance-grid .grid');
        const inChargeNameInput = document.getElementById('inChargeName');
        const weekNumberInput = document.getElementById('weekNumber');
        const loadingOverlay = document.getElementById('loadingOverlay');
        const appContent = document.getElementById('appContent');

        // Function to set up initial data if document doesn't exist
        async function setupInitialData() {
            const initialData = {
                inChargeName: '',
                weekNumber: '',
                students: {}
            };
            students.forEach(student => {
                initialData.students[student.id] = {};
                days.forEach(day => {
                    initialData.students[student.id][day] = { inTime: '', isPresent: false };
                });
            });
            try {
                await setDoc(doc(db, ATTENDANCE_DOC_PATH, ATTENDANCE_DOC_ID), initialData, { merge: true });
                console.log("Initial attendance data set in Firestore.");
            } catch (e) {
                console.error("Error setting initial document:", e);
            }
        }

        function startRealtimeListener() {
            const docRef = doc(db, ATTENDANCE_DOC_PATH, ATTENDANCE_DOC_ID);
            onSnapshot(docRef, (docSnap) => {
                if (docSnap.exists()) {
                    attendanceData = docSnap.data();
                    console.log("Current data from Firestore:", attendanceData);
                    updateUI();
                } else {
                    console.log("No such document! Setting up initial data.");
                    setupInitialData();
                }
                loadingOverlay.classList.add('hidden');
                appContent.classList.remove('hidden');
            }, (error) => {
                console.error("Error getting document:", error);
                loadingOverlay.textContent = "Error loading data. Please refresh.";
            });
        }

        // Function to update Firestore
        async function updateFirestore(field, value, studentId = null, day = null, subField = null) {
            const docRef = doc(db, ATTENDANCE_DOC_PATH, ATTENDANCE_DOC_ID);
            let updatePayload = {};

            if (studentId && day && subField) {
                // Update a specific student's day's inTime or isPresent
                updatePayload[`students.${studentId}.${day}.${subField}`] = value;
            } else {
                // Update top-level fields like inChargeName or weekNumber
                updatePayload[field] = value;
            }

            try {
                await setDoc(docRef, updatePayload, { merge: true });
                // Data will be updated via onSnapshot, no need to call updateUI directly here
            } catch (e) {
                console.error("Error updating document:", e);
            }
        }

        function renderGrid() {
            gridContainer.querySelectorAll('.student-row').forEach(row => row.remove());
            
            students.forEach(student => {
                const studentNameCell = document.createElement('div');
                studentNameCell.className = 'student-row text-left p-3 font-medium text-slate-800 self-center';
                studentNameCell.textContent = student.name;
                gridContainer.appendChild(studentNameCell);

                days.forEach(day => {
                    const cell = document.createElement('div');
                    cell.className = 'student-row grid-cell';
                    
                    const timeInput = document.createElement('input');
                    timeInput.type = 'time';
                    timeInput.className = 'time-input';
                    timeInput.dataset.studentId = student.id;
                    timeInput.dataset.day = day;
                    
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.className = 'form-checkbox text-blue-600 rounded';
                    checkbox.dataset.studentId = student.id;
                    checkbox.dataset.day = day;

                    cell.appendChild(timeInput);
                    cell.appendChild(checkbox);
                    gridContainer.appendChild(cell);
                });
            });
            addEventListeners();
        }
        
        function handleTimeChange(e) {
            const input = e.target;
            const { studentId, day } = input.dataset;
            updateFirestore(null, input.value, studentId, day, 'inTime');
        }

        function handleCheckboxChange(e) {
            const checkbox = e.target;
            const { studentId, day } = checkbox.dataset;
            updateFirestore(null, checkbox.checked, studentId, day, 'isPresent');
        }

        function handleHeaderInputChange(e) {
            const input = e.target;
            updateFirestore(input.id, input.value);
        }

        function addEventListeners() {
            document.querySelectorAll('.time-input').forEach(input => {
                input.addEventListener('change', handleTimeChange);
            });
            document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                checkbox.addEventListener('change', handleCheckboxChange);
            });

            document.querySelectorAll('.day-header').forEach(header => {
                header.addEventListener('click', handleDayHeaderClick);
            });

            inChargeNameInput.addEventListener('input', handleHeaderInputChange);
            weekNumberInput.addEventListener('input', handleHeaderInputChange);

            document.getElementById('resetBtn').addEventListener('click', async () => {
                if (confirm('WARNING: This will reset the ENTIRE sheet for ALL students and delete all attendance data. This action is typically for the Metro In Charge. Are you sure you want to proceed?')) {
                    await setupInitialData(); // Re-initialize data in Firestore
                    // The onSnapshot listener will then update the UI
                    updateDailyStats('-'); // Clear daily stats display
                    currentSelectedDay = null;
                    document.querySelectorAll('.day-header').forEach(h => h.classList.remove('bg-blue-500', 'text-white'));
                    document.querySelectorAll('.day-header').forEach(h => h.classList.add('bg-slate-100'));
                }
            });
        }

        function handleDayHeaderClick(e) {
            const dayId = e.currentTarget.id.split('-')[1];
            currentSelectedDay = dayId;
            updateDailyStats(dayId);
            
            document.querySelectorAll('.day-header').forEach(h => h.classList.remove('bg-blue-500', 'text-white'));
            document.querySelectorAll('.day-header').forEach(h => h.classList.add('bg-slate-100'));
            
            e.currentTarget.classList.add('bg-blue-500', 'text-white');
            e.currentTarget.classList.remove('bg-slate-100');
        }

        function updateUI() {
            // Update header inputs
            inChargeNameInput.value = attendanceData.inChargeName || '';
            weekNumberInput.value = attendanceData.weekNumber || '';

            students.forEach(student => {
                days.forEach(day => {
                    const data = attendanceData.students[student.id] && attendanceData.students[student.id][day] ? attendanceData.students[student.id][day] : { inTime: '', isPresent: false };
                    const timeInput = gridContainer.querySelector(`input[type="time"][data-student-id="${student.id}"][data-day="${day}"]`);
                    const checkbox = gridContainer.querySelector(`input[type="checkbox"][data-student-id="${student.id}"][data-day="${day}"]`);
                    
                    if (timeInput) timeInput.value = data.inTime;
                    if (checkbox) checkbox.checked = data.isPresent;
                });
            });
            updateDailyStats(currentSelectedDay); // Ensure daily stats are also updated
            updateChart();
        }

        function updateDailyStats(day) {
            if (!day || day === '-') {
                document.getElementById('selected-day').textContent = '-';
                document.getElementById('stat-present').textContent = '0';
                document.getElementById('stat-absent').textContent = '0';
                return;
            }

            let present = 0, absent = 0;
            students.forEach(student => {
                if (attendanceData.students[student.id] && attendanceData.students[student.id][day] && attendanceData.students[student.id][day].isPresent) {
                    present++;
                } else {
                    absent++;
                }
            });
            document.getElementById('selected-day').textContent = day;
            document.getElementById('stat-present').textContent = present;
            document.getElementById('stat-absent').textContent = absent;
        }

        function updateChart() {
            if (chartInstance) {
                const studentTotals = students.map(student => {
                    // Ensure student data exists before filtering
                    const studentDayData = attendanceData.students[student.id] || {};
                    return days.filter(day => studentDayData[day] && studentDayData[day].isPresent).length;
                });

                chartInstance.data.datasets[0].data = studentTotals;
                chartInstance.update();
            }
        }

        function initializeChart() {
            const ctx = document.getElementById('attendanceChart').getContext('2d');
            chartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: students.map(s => s.name),
                    datasets: [{
                        label: 'Days Present',
                        data: [],
                        backgroundColor: 'rgba(59, 130, 246, 0.7)', // blue-500
                        borderColor: 'rgba(59, 130, 246, 1)',
                        borderWidth: 1,
                        borderRadius: 4,
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            beginAtZero: true,
                            max: 5, // Max 5 days a week
                            ticks: {
                                stepSize: 1
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        title: {
                            display: true,
                            text: 'Weekly Attendance Summary (Days Present)',
                            font: {
                                size: 16
                            }
                        }
                    }
                }
            });
        }

        // This function is now exposed globally and called by the first script tag
        // after Firebase is initialized.
        window.runAttendanceApp = function() {
            renderGrid();
            initializeChart();
            startRealtimeListener(); // Start listening for Firestore updates
            // updateUI() will be called by the onSnapshot listener initially
            // updateDailyStats('-') will be called by updateUI or by onSnapshot
        };
    </script>
</body>
</html>
